var search_data = {"index":{"searchIndex":["csvgenerator","car","pdfgenerator","scraper","check_brand_and_model()","display()","generate_pdf()","load_page()","new()","new()","new()","new()","save_cars()","scrape_pages()","write_to_csv()","gemfile","gemfile.lock","readme","styles.css"],"longSearchIndex":["csvgenerator","car","pdfgenerator","scraper","scraper#check_brand_and_model()","car#display()","pdfgenerator#generate_pdf()","scraper#load_page()","csvgenerator::new()","car::new()","pdfgenerator::new()","scraper::new()","scraper#save_cars()","scraper#scrape_pages()","csvgenerator#write_to_csv()","","","",""],"info":[["CSVGenerator","","CSVGenerator.html","","<p>CSVGenerator is responsible for writing car data to a CSV file.\n"],["Car","","Car.html","","<p>Car represents a car with various attributes.\n"],["PDFGenerator","","PDFGenerator.html","","<p>PDFGenerator is responsible for generating a PDF report of car data.\n"],["Scraper","","Scraper.html","","<p>Scraper is responsible for scraping car data from a website.\n"],["check_brand_and_model","Scraper","Scraper.html#method-i-check_brand_and_model","()","<p>Checks the brand and model of the cars being scraped.\n<p>@raise [RuntimeError] if no cars are found for the …\n"],["display","Car","Car.html#method-i-display","()","<p>Displays the car’s attributes.\n"],["generate_pdf","PDFGenerator","PDFGenerator.html#method-i-generate_pdf","()","<p>Generates the PDF report.\n"],["load_page","Scraper","Scraper.html#method-i-load_page","()","<p>Loads the current page.\n<p>@return [Nokogiri::HTML::Document] the parsed HTML document.\n"],["new","CSVGenerator","CSVGenerator.html#method-c-new","(filename)","<p>Initializes the CSVGenerator with a filename.\n<p>@param filename [String] the name of the CSV file to write …\n"],["new","Car","Car.html#method-c-new","(car_data)","<p>Initializes a new Car object with the provided data.\n"],["new","PDFGenerator","PDFGenerator.html#method-c-new","(filename, cars)","<p>Initializes the PDFGenerator with a filename and car data.\n<p>@param filename [String] the name of the PDF …\n"],["new","Scraper","Scraper.html#method-c-new","(base_url, number_of_pages)","<p>Initializes the Scraper with a base URL and number of pages to scrape.\n<p>@param base_url [String] the base …\n"],["save_cars","Scraper","Scraper.html#method-i-save_cars","()","<p>Saves the car data from the current page.\n"],["scrape_pages","Scraper","Scraper.html#method-i-scrape_pages","()","<p>Scrapes the specified number of pages for car data.\n<p>@return [Array&lt;Car&gt;] an array of Car objects. …\n"],["write_to_csv","CSVGenerator","CSVGenerator.html#method-i-write_to_csv","(cars)","<p>Writes the car data to a CSV file.\n<p>@param cars [Array&lt;Car&gt;] an array of Car objects to write to …\n"],["Gemfile","","Gemfile.html","","<p># frozen_string_literal: true\n<p>source “rubygems.org”\n<p># gem “rails”\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  activesupport (7.2.0)\n    base64\n    bigdecimal\n    concurrent-ruby ...</pre>\n"],["README","","README_md.html","","<p>web-scraper\n<p>This project is a web scraper designed to extract car listings from a specified website.  …\n"],["styles.css","","lib/templates/styles_css.html","","<p>body {\n\n<pre>font-family: Arial, sans-serif;\nmargin: 20px;\nbackground-color: #f9f9f9;</pre>\n<p>}\n"]]}}